Sub NPSCommentsBreakdown()    ProcessCommentsWordsAndFilter    ListUniqueCommentsAndCountOccurrences    ListCustomerAndNPSScoreForUniqueCommentsEnd SubSub ProcessCommentsWordsAndFilter()    ' This sub processes comments, extracts keywords, and filters data.    Dim wsCleanData As Worksheet    Dim wsCommentsWords As Worksheet    Dim wsLists As Worksheet    Dim wsOverallScore As Worksheet    Dim lastRowCleanData As Long    Dim lastRowLists As Long    Dim lastRowOverallScore As Long    Dim targetValue As Variant    Dim destRow As Long    Dim wordDict As Object    Dim customerCounts As Object        ' Save original screen updating and calculation settings    Dim originalScreenUpdating As Boolean    Dim originalCalculation As XlCalculation    originalScreenUpdating = Application.ScreenUpdating    originalCalculation = Application.Calculation    Application.ScreenUpdating = False    Application.Calculation = xlCalculationManual        ' Define source and destination worksheets    Set wsCleanData = ThisWorkbook.Sheets("CleanData")    Set wsCommentsWords = ThisWorkbook.Sheets("CommentsWords_LowScore_Data")    Set wsLists = ThisWorkbook.Sheets("Lists")    Set wsOverallScore = ThisWorkbook.Sheets("OverallScore_Data")        ' Find the last row in column M of the CleanData worksheet    lastRowCleanData = wsCleanData.Cells(wsCleanData.Rows.count, "M").End(xlUp).Row        ' Find the last row in column AK of the Lists worksheet    lastRowLists = wsLists.Cells(wsLists.Rows.count, "AK").End(xlUp).Row        ' Find the last row in column J of the OverallScore_Data worksheet    lastRowOverallScore = wsOverallScore.Cells(wsOverallScore.Rows.count, "J").End(xlUp).Row        ' Get the value from cell B3 in the OverallScore_Data worksheet    targetValue = wsOverallScore.Range("B3").value        ' Initialize dictionaries to store unique words and customer counts    Set wordDict = CreateObject("Scripting.Dictionary")    Set customerCounts = CreateObject("Scripting.Dictionary")        ' Initialize the destination row    destRow = 4        ' Loop through column M of the CleanData worksheet and add words to the dictionary    For i = 2 To lastRowCleanData ' Start from the second row, assuming a header row        ' Check if the NPS Score is equal or below 3 and Needs Improving matches the target value        If wsCleanData.Cells(i, "J").value <= 3 And wsCleanData.Cells(i, "K").value = targetValue Then            cellContent = wsCleanData.Cells(i, "M").value            ' Remove punctuation and split into words            cellContent = ReplacePunctuation(cellContent)            words = Split(cellContent, " ")                        ' Loop through the words and process them            For Each word In words                ' Remove special characters                processedWord = ReplaceAccents(word)                                ' Check if the word exists in the Lists worksheet                If WordExistsInList(wsLists, processedWord, lastRowLists) Then                    ' Add the word to the dictionary (including duplicates)                    If Not wordDict.Exists(processedWord) Then                        wordDict.Add processedWord, 1                    Else                        wordDict(processedWord) = wordDict(processedWord) + 1                    End If                    ' Increment the customer count in the customerCounts dictionary                    customer = wsCleanData.Cells(i, "E").value                    If Not customerCounts.Exists(customer) Then                        customerCounts.Add customer, 1                    Else                        customerCounts(customer) = customerCounts(customer) + 1                    End If                End If            Next word        End If    Next i    ' Loop through the sorted words in the dictionary    For Each key In wordDict.keys        ' Get the word count        wordCount = wordDict(key)                ' Loop through column A of the CleanData worksheet and fetch corresponding data        For i = 2 To lastRowCleanData            ' Check if the NPS Score is equal or below 3 and Needs Improving matches the target value            If wsCleanData.Cells(i, "J").value <= 3 And wsCleanData.Cells(i, "K").value = targetValue Then                cellContent = wsCleanData.Cells(i, "M").value                ' Remove punctuation and split into words                cellContent = ReplacePunctuation(cellContent)                words = Split(cellContent, " ")                For Each wrd In words                    If ReplaceSpecialCharacters(wrd) = key Then                        ' Write the data to the destination worksheet                        wsCommentsWords.Cells(destRow, "B").value = wsCleanData.Cells(i, "A").value ' Date                        wsCommentsWords.Cells(destRow, "C").value = key ' Word                        wsCommentsWords.Cells(destRow, "D").value = wordCount ' Word Occurrences                        wsCommentsWords.Cells(destRow, "E").value = wsCleanData.Cells(i, "E").value ' Customer                        wsCommentsWords.Cells(destRow, "F").value = customerCounts(wsCleanData.Cells(i, "E").value) ' Customer Occurrences                        wsCommentsWords.Cells(destRow, "G").value = wsCleanData.Cells(i, "H").value ' SuiteSuccess?                        wsCommentsWords.Cells(destRow, "H").value = wsCleanData.Cells(i, "J").value ' NPS Score                        wsCommentsWords.Cells(destRow, "I").value = wsCleanData.Cells(i, "K").value ' Needs Improving                        wsCommentsWords.Cells(destRow, "J").value = wsCleanData.Cells(i, "M").value ' Comments                        destRow = destRow + 1                    End If                Next wrd            End If        Next i    Next key        ' Sort the list by count (column D) in descending order, then by word (column C) in ascending alphabetical order, and finally by date (column B) in descending order    wsCommentsWords.Sort.SortFields.Clear    wsCommentsWords.Sort.SortFields.Add2 key:=wsCommentsWords.Range("D4:D" & destRow - 1), _        SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal    wsCommentsWords.Sort.SortFields.Add2 key:=wsCommentsWords.Range("C4:C" & destRow - 1), _        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal    wsCommentsWords.Sort.SortFields.Add2 key:=wsCommentsWords.Range("B4:B" & destRow - 1), _        SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal    With wsCommentsWords.Sort        .SetRange wsCommentsWords.Range("B4:J" & destRow - 1) ' Adjust the range to include new columns        .Header = xlNo        .MatchCase = False        .Orientation = xlTopToBottom        .SortMethod = xlPinYin        .Apply    End With        ' Apply the desired date format to column B after sorting    wsCommentsWords.Range("B4:B" & destRow - 1).NumberFormat = "dd/mm/yyyy"        ' Reactivate the original screen updating and automatic calculation settings    Application.ScreenUpdating = originalScreenUpdating    Application.Calculation = originalCalculation        ' Notify when the operation is complete    MsgBox "Processing completed successfully!"        ' Clean up    Set wordDict = Nothing    Set customerCounts = NothingEnd SubSub ListUniqueCommentsAndCountOccurrences()    ' This sub lists unique comments from column J in column O and counts occurrences in column P    Dim wsCommentsWords As Worksheet    Dim lastRowComments As Long    Dim commentColumn As Range    Dim comment As Range    Dim commentText As String    Dim commentDict As Object    ' Define the "CommentsWords_LowScore_Data" worksheet    Set wsCommentsWords = ThisWorkbook.Sheets("CommentsWords_LowScore_Data")    ' Find the last row in column J of the "CommentsWords_LowScore_Data" worksheet    lastRowComments = wsCommentsWords.Cells(wsCommentsWords.Rows.count, "J").End(xlUp).Row    ' Define the comment column    Set commentColumn = wsCommentsWords.Range("J4:J" & lastRowComments)    ' Initialize variables    Dim outputRow As Long    outputRow = 4    Set commentDict = CreateObject("Scripting.Dictionary")    ' Clear existing data in columns O and P to start fresh    wsCommentsWords.Range("O4:P" & wsCommentsWords.Cells(wsCommentsWords.Rows.count, "P").End(xlUp).Row).ClearContents    ' Loop through the comments    For Each comment In commentColumn        commentText = comment.value        ' Check if the comment is not empty or blank        If commentText <> "" Then            ' Check if the comment is unique            If Not commentDict.Exists(commentText) Then                ' Count the occurrences of the comment in column J                Dim commentCount As Long                commentCount = CountOccurrencesInColumn(commentColumn, commentText)                ' Store the comment and its count in columns O and P                wsCommentsWords.Cells(outputRow, "O").value = commentText                wsCommentsWords.Cells(outputRow, "P").value = commentCount                outputRow = outputRow + 1                ' Add the comment and its count to the dictionary to mark it as processed                commentDict.Add commentText, commentCount            End If        End If    Next comment    ' Sort the list by comment count (column P) in descending order    SortCommentsByCount wsCommentsWordsEnd SubFunction CountOccurrencesInColumn(ByVal rng As Range, ByVal value As String) As Long    ' Count the occurrences of a specific value in a column    Dim cell As Range    Dim count As Long    For Each cell In rng        If cell.value = value Then            count = count + 1        End If    Next cell    CountOccurrencesInColumn = countEnd FunctionFunction SortCommentsByCount(ByVal ws As Worksheet)    ' Sort comments by count (column P) in descending order    Dim lastRow As Long    lastRow = ws.Cells(ws.Rows.count, "P").End(xlUp).Row    ws.Sort.SortFields.Clear    ws.Sort.SortFields.Add2 key:=ws.Range("P4:P" & lastRow), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal    With ws.Sort        .SetRange ws.Range("O4:P" & lastRow)        .Header = xlNo        .MatchCase = False        .Orientation = xlTopToBottom        .SortMethod = xlPinYin        .Apply    End WithEnd FunctionFunction FindCommentInColumnJ(ByVal column As Range, ByVal comment As String) As Range    Dim cell As Range    For Each cell In column        If cell.value = comment Then            Set FindCommentInColumnJ = cell            Exit Function        End If    Next cell    Set FindCommentInColumnJ = NothingEnd FunctionFunction SortCollectionByCount(ByVal col As collection, Optional ByVal ascending As Boolean = True) As collection    Dim arr() As Variant    Dim commentItem As Object    Dim i As Long    Dim j As Long    Dim temp As Variant    ReDim arr(1 To col.count)    i = 1    For Each commentItem In col        arr(i) = commentItem        i = i + 1    Next commentItem    For i = LBound(arr) To UBound(arr) - 1        For j = i + 1 To UBound(arr)            If (arr(i)("Count") < arr(j)("Count")) Xor ascending Then                Set temp = arr(i)                Set arr(i) = arr(j)                Set arr(j) = temp            End If        Next j    Next i    Set col = New collection    For i = LBound(arr) To UBound(arr)        col.Add arr(i)    Next i    Set SortCollectionByCount = colEnd FunctionSub SortArrayByColumn(ByRef arr As Variant, ByVal col As Long, ByVal descending As Boolean)    Dim i As Long, j As Long    Dim temp As Variant    For i = LBound(arr, 1) To UBound(arr, 1) - 1        For j = i + 1 To UBound(arr, 1)            If (arr(i, col) > arr(j, col)) Xor descending Then                For k = LBound(arr, 2) To UBound(arr, 2)                    temp = arr(i, k)                    arr(i, k) = arr(j, k)                    arr(j, k) = temp                Next k            End If        Next j    Next iEnd SubFunction uniqueCommentsExists(ByRef collection As collection, ByVal comment As String) As Boolean    On Error Resume Next    collection.Add comment, CStr(comment)    uniqueCommentsExists = (Err.Number = 0)    Err.Clear    On Error GoTo 0End FunctionFunction CountKeywordOccurrences(ByVal commentText As String, ByVal keywordText As String) As Long    ' Count the occurrences of a keyword in the comment text    Dim keywordCount As Long    Dim startPos As Long        keywordCount = 0    startPos = 1        ' Loop through the comment text and count keyword occurrences    Do        startPos = InStr(startPos, commentText, keywordText, vbTextCompare)        If startPos > 0 Then            keywordCount = keywordCount + 1            startPos = startPos + 1        End If    Loop Until startPos = 0    CountKeywordOccurrences = keywordCountEnd FunctionFunction GetCustomerForComment(ByRef ws As Worksheet, ByVal comment As String) As Variant    ' Find the corresponding Customer (column E) in the "CleanData" worksheet for the comment    Dim lastRow As Long    lastRow = ws.Cells(ws.Rows.count, "M").End(xlUp).Row        Dim cell As Range    For Each cell In ws.Range("M4:M" & lastRow)        If cell.value = comment Then            GetCustomerForComment = cell.Offset(0, -8).value ' Column E (Offset by -8 columns)            Exit Function        End If    Next cell    GetCustomerForComment = Empty ' Return Empty if not foundEnd FunctionFunction GetNPSScoreForComment(ByRef ws As Worksheet, ByVal comment As String) As Variant    ' Find the corresponding NPS Score (column K) in the "CleanData" worksheet for the comment    Dim lastRow As Long    lastRow = ws.Cells(ws.Rows.count, "M").End(xlUp).Row        Dim cell As Range    For Each cell In ws.Range("M4:M" & lastRow)        If cell.value = comment Then            GetNPSScoreForComment = cell.Offset(0, 2).value ' Column K (Offset by 2 columns)            Exit Function        End If    Next cell    GetNPSScoreForComment = Empty ' Return Empty if not foundEnd FunctionFunction IsPunctuation(ByVal char As String) As Boolean    ' Check if a character is punctuation    Select Case char        Case ".", ",", ";", ":", "?", "!", "'", """", "(", ")", "[", "]", "{", "}", "<", ">"            IsPunctuation = True        Case Else            IsPunctuation = False    End SelectEnd FunctionFunction ReplacePunctuation(ByVal text As String) As String    ' Remove punctuation from the text    Dim i As Integer    Dim resultText As String    Dim c As String    For i = 1 To Len(text)        c = Mid(text, i, 1)        If Not IsPunctuation(c) Then ' Check if the character is not punctuation            resultText = resultText & c        End If    Next i    ReplacePunctuation = resultTextEnd FunctionFunction ReplaceAccents(ByVal text As String) As String    ' Replace accents with non-accented characters    Dim accents As String    Dim accentsOut As String    accents = "ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜàáâãäåçèéêëìíîïñòóôõöùúûü"    accentsOut = "AAAAAACEEEEIIIINOOOOOUUUUaaaaaaceeeeiiiinooooouuuu"    For i = 1 To Len(accents)        text = Replace(text, Mid(accents, i, 1), Mid(accentsOut, i, 1))    Next i    ReplaceAccents = textEnd FunctionFunction ReplaceSpecialCharacters(ByVal text As String) As String    ' Remove special characters, punctuation, and convert to uppercase    Dim i As Integer    Dim resultText As String    Dim c As String    For i = 1 To Len(text)        c = Mid(text, i, 1)        If Not IsPunctuation(c) Then            Select Case c                Case "¡", "¿", "√", "¬", "ƒ", "·", "‡", "„", "‚", "‰"                    resultText = resultText & "A"                Case "…", "»", " ", "À", "È", "Ë", "Í", "Î"                    resultText = resultText & "E"                Case "Õ", "Ã", "Œ", "œ", "Ì", "Ï", "Ó", "Ô"                    resultText = resultText & "I"                Case "”", "“", "’", "‘", "÷", "Û", "Ú", "ı", "Ù", "ˆ"                    resultText = resultText & "O"                Case "⁄", "Ÿ", "€", "‹", "˙", "˘", "˚", "¸"                    resultText = resultText & "U"                Case "«", "Á"                    resultText = resultText & "C"                Case Else                    resultText = resultText & c            End Select        End If    Next i    ReplaceSpecialCharacters = UCase(resultText)End FunctionFunction WordExistsInList(ByVal wsLists As Worksheet, ByVal word As String, ByVal lastRowLists As Long) As Boolean    ' Check if the word exists in column AK of the Lists worksheet    Dim cell As Range    For Each cell In wsLists.Range("AK2:AK" & lastRowLists)        If UCase(cell.value) = word Then            WordExistsInList = True            Exit Function        End If    Next cell    WordExistsInList = FalseEnd FunctionFunction SortDictionary(ByRef dict As Object) As collection    ' Function to sort a dictionary in descending order by count    Dim key As Variant    Dim sortedKeys() As Variant    Dim i As Long    Dim j As Long    Dim tempKey As Variant    Dim tempCount As Long    ' Fill an array with the keys (words) from the dictionary    i = 0    For Each key In dict.keys        ReDim Preserve sortedKeys(i)        sortedKeys(i) = key        i = i + 1    Next key    ' Sort the array based on count (column C) in descending order    For i = LBound(sortedKeys) To UBound(sortedKeys) - 1        For j = i + 1 To UBound(sortedKeys)            If dict(sortedKeys(i)) < dict(sortedKeys(j)) Then                ' Swap the keys' positions                tempKey = sortedKeys(i)                sortedKeys(i) = sortedKeys(j)                sortedKeys(j) = tempKey            End If        Next j    Next i    ' Create a collection to store the sorted keys    Dim SortColl As collection    Set SortColl = New collection    ' Add the sorted keys to the SortColl collection    For i = LBound(sortedKeys) To UBound(sortedKeys)        SortColl.Add sortedKeys(i)    Next i    ' Return the sorted collection    Set SortDictionary = SortCollEnd FunctionSub ListCustomerAndNPSScoreForUniqueComments()    Dim wsCommentsWords As Worksheet    Dim lastRowCommentsWords As Long    Dim wsUniqueComments As Worksheet    Dim lastRowUniqueComments As Long    Dim commentColumn As Range    Dim uniqueComment As Range    Dim comment As String    Dim customer As Variant    Dim npsScore As Variant    ' Define relevant worksheets    Set wsCommentsWords = ThisWorkbook.Sheets("CommentsWords_LowScore_Data")    ' Find the last row in columns J (Comments) and O (Unique Comments)    lastRowCommentsWords = wsCommentsWords.Cells(wsCommentsWords.Rows.count, "J").End(xlUp).Row    ' Define the "CommentsWords_LowScore_Data" worksheet    Set wsUniqueComments = ThisWorkbook.Sheets("CommentsWords_LowScore_Data")    ' Find the last row in columns J (Comments) and O (Unique Comments)    lastRowUniqueComments = wsUniqueComments.Cells(wsUniqueComments.Rows.count, "O").End(xlUp).Row    ' Define the comment column and initialize the output row in the UniqueComments worksheet    Set commentColumn = wsCommentsWords.Range("J4:J" & lastRowCommentsWords)    outputRow = 4    ' Clear existing data in columns M (Customer) and N (NPS Score) in the UniqueComments worksheet    wsCommentsWords.Range("M4:N" & lastRowUniqueComments).ClearContents    ' Loop through unique comments in column O (Unique Comments)    For Each uniqueComment In wsUniqueComments.Range("O4:O" & lastRowUniqueComments)        comment = uniqueComment.value        ' Find the comment in column J (Comments) of the CommentsWords_LowScore_Data worksheet        Set foundComment = FindCommentInColumnJ(commentColumn, comment)        ' If the comment is found, get the values of Customer and NPS Score        If Not foundComment Is Nothing Then            customer = foundComment.Offset(0, -5).value ' Column E (Customer) - Offset by -5 columns            npsScore = foundComment.Offset(0, -2).value ' Column H (NPS Score) - Offset by -2 columns            ' Write the values of Customer and NPS Score to columns M and N in the UniqueComments worksheet            wsCommentsWords.Cells(outputRow, "M").value = customer            wsCommentsWords.Cells(outputRow, "N").value = npsScore            outputRow = outputRow + 1        End If    Next uniqueCommentEnd Sub